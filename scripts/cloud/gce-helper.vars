#!/bin/bash

# NOTE: gcloud compute config-ssh and gcloud compute config-ssh --remove work to add/remove from local caller, but requires full hostname, gcp_compute plugin only uses name

# This file is used to assist and encapsulate re-usable functions

# Default to "n1-standard-16" ## "n2-standard-16" n2-standard-8 -- # n2-custom (6 vCPUs, 21.25 GB memory) recommended
export MACHINE_SIZE=${MACHINE_SIZE:-"n2-standard-8"}
export NETWORK=${GCP_NETWORK:-"default"}
export DISK_SIZE=${DISK_SIZE:-"500G"}
export SECOND_DISK_SIZE=${SECOND_DISK_SIZE:-"250G"}
# NOTE: Cascade Lake works with N2, Haswell works with N1
export MIN_MACHINE_PLATFORM=${MIN_MACHINE_PLATFORM:-"Intel Cascade Lake"}
export MACHINE_OS_FAMILY=${MACHINE_OS_FAMILY:-"ubuntu-2004-lts"} # rhel-8
export MACHINE_OS_PROJECT=${MACHINE_OS_PROJECT:-"ubuntu-os-cloud"} # rhel-cloud

export OS_BUILD="debian" # default
if [[ "${MACHINE_OS_FAMILY}" =~ "ubuntu" ]] || [[ "${MACHINE_OS_FAMILY}" =~ "debian" ]]; then
    echo "Buildling debian/ubuntu based machines"
elif [[ "${MACHINE_OS_FAMILY}" =~ "rhel" ]] || [[ "${MACHINE_OS_FAMILY}" =~ "centos" ]]; then
    echo "Buildling redhat/centos based machines"
    OS_BUILD="rhel"
fi

export GCE_NAME_PREFIX=${GCE_NAME_PREFIX:-"cnuc-"}
export ANSIBLE_USER="abm-admin" # user on remote box that will be the ansible user (will be in sudoer)
export SSH_KEY_SECRET_KEY="install-pub-key" # Used in gce-init script to pull .pub key
export PREEMPTIBLE_OPTION=${PREEMPTIBLE_OPTION:-""} # Default to empty, but if script ran with -p, the incoming variable will be preset

# GCE Init Script
export SETUP_VXLAN_SCRIPT="/var/setup-vxlan.sh"
export SYSTEM_SERVICE_NAME="setup-vxlan.service"
# systemd configuration
export SYSTEM_SERVICE_VXLAN="/etc/systemd/system/${SYSTEM_SERVICE_NAME}"

# GCS Bucket for startup script
export BUCKET_NAME="abm-edge-boot-${PROJECT_ID}"

# Can override if set an environment variable VXLAN_ID
VXLAN_ID=${VXLAN_ID:-40}
# How many machines in a cluster (default to 3)
REQUIRED_CLUSTER_SIZE=${REQUIRED_CLUSTER_SIZE:-3}

###
###  Create storage bucket for Init Script
###
function setup_init_bucket() {
    local BUCKET=${1-$BUCKET_NAME}
    local PROJECT=${2-$PROJECT_ID}
    gsutil -q stat gs://${BUCKET}/.dontremove 2> /dev/null
    if [[ $? > 0 ]]; then
        echo "Bucket does not exist, creating gs://${BUCKET}"
        gsutil mb -p ${PROJECT} gs://${BUCKET}
        if [[ $? > 0 ]]; then
            echo "Error: Cannot create bucket ${BUCKET} in ${PROJECT}"
            exit 1
        fi
        # Add file for flag that bucket is available
        echo "do not remove this file" | gsutil cp - gs://$BUCKET/.dontremove
    fi
}


###
### Copy init script to bucket with variable replaced
###
function copy_init_script() {
    if [[ -z "${PREFIX_DIR}" ]]; then
      echo "Error: PREFIX_DIR is not set in gce-helper.vars."
      exit 1
    fi

    # Only substitute the following variables
    envsubst \${ANSIBLE_USER},\${SSH_KEY_SECRET_KEY},\${SETUP_VXLAN_SCRIPT},\${SYSTEM_SERVICE_VXLAN},\${SYSTEM_SERVICE_NAME} < ${PREFIX_DIR}/gce-init.sh > ${PREFIX_DIR}/gce-init-copy.sh
    gsutil cp ${PREFIX_DIR}/gce-init-copy.sh gs://${BUCKET_NAME}/gce-init.sh
    rm -rf ${PREFIX_DIR}/gce-init-copy.sh
}

###
### Create a secret and version; if secret already exists, adds a version. Idempotent(ish)
###
function create_secret() {
    KEY="$1"
    VALUE="$2"
    FILE="${3-false}"
    PROJECT="${4-$PROJECT_ID}"
    EXISTS=$(gcloud secrets describe "${KEY}" --project "${PROJECT}" 2> /dev/null)
    if [[ $? > 0 ]]; then
        gcloud secrets create ${KEY} --replication-policy="automatic" --project=${PROJECT}
    fi
    EXISTS=$(gcloud secrets -q versions access latest --format="value(name)" --secret="${KEY}" --project "${PROJECT}" 2> /dev/null)
    CREATE=false

    if [[ -z "${EXISTS}" ]]; then
        # Only create a new version IF there is no versions
        CREATE=true
    else
        # Secret Exists, check the contents of the latest against the current
        CURR_VALUE=$(gcloud secrets -q versions access latest --secret="${KEY}" --project "${PROJECT}")
        NEW_VALUE="${VALUE}"
        # If this is a file, get the contents of the file, if not, stick with the string value for comparision
        if [[ "$FILE" == "true" ]]; then
            NEW_VALUE=$(cat ${VALUE})
        fi

        COMPARE=$(diff <( printf '%s\n' "${CURR_VALUE}" ) <( printf '%s\n' "${NEW_VALUE}" ))
        if [[ $? -gt 0 ]]; then
            # there is a difference
            echo "Current secret exists, but values are different. New version to be created"
            echo "${COMPARE}"
            CREATE=true
        fi
    fi

    if [[ ${CREATE} == true ]]; then
        if [[ "$FILE" == "false" ]]; then
            # Standard Input
            echo "Creating String Secret"
            echo ${VALUE} | gcloud secrets versions add ${KEY} --project=${PROJECT} --data-file=-
        else
            # File reference
            echo "Creating File Secret"
            gcloud secrets versions add ${KEY} --project=${PROJECT} --data-file=${VALUE}
        fi
    fi

}

###
###  Create SSH key key used in ansible provisioning (ie, the "host" box)
###
function create_ssh_key() {

    SSH_KEY_LOC="$1"
    PEM_FORMAT="$2"
    COMMENT="${3-emulated-nucs-gce}"
    if [ ! -f "${SSH_KEY_LOC}" ]; then
        echo "SSH key does not exist, creating..."
        # Remove .pub from SSH_PUB_KEY_LOCATION
        key_location="${SSH_KEY_LOC%.pub}"
        ssh-keygen -a 100 ${PEM_FORMAT} -f ${key_location} -t ed25519 -C "${COMMENT}"  -q -N ""
    fi
}

###
### Display the IP addresses in /etc/hosts format
###
function display_ip_host_format() {
    INSTANCES=$1
    DELIM=';'

    if [[ -z "${INSTANCES}" ]]; then
        INSTANCES=($(gcloud compute instances list --filter="labels.type=abm" --format="value[separator='${DELIM}'](name, networkInterfaces[0].accessConfigs[0].natIP)" 2>/dev/null))
    fi

    SIZE="${#INSTANCES[@]}"

    if [[ ${SIZE} -gt 0 ]]; then
        echo -e "\n# AUTO-GENERATED-CONSUMER-EDGE"
        echo ""
        for INSTANCE in "${INSTANCES[@]}"
        do
            PARTS=(${INSTANCE//${DELIM}/ })
            echo -e "${PARTS[1]}\t\t${PARTS[0]}"
        done
        echo ""
    fi
}

###
### Displays the IP addresses for GCE instances matching cnuc format
###
function display_gce_vms_ips() {
    DELIM=';'
    INSTANCES=($(gcloud compute instances list --filter="labels.type=abm" --format="value[separator='${DELIM}'](name, networkInterfaces[0].accessConfigs[0].natIP)" 2>/dev/null))

    SSH_STRING=""
    echo -e "\nSSH Strings for cut-copy-paste access\n===================\n"
    for INSTANCE in "${INSTANCES[@]}"
    do
        PARTS=(${INSTANCE//${DELIM}/ })
        echo -e "${PARTS[0]}:\n\tssh -F ./build-artifacts/ssh-config abm-admin@${PARTS[0]}\n\t\t\t--or--\n\tssh -F ./build-artifacts/ssh-config abm-admin@${PARTS[1]}\n\n"
    done

    echo -e "\nAdjust Known Hosts, remove existing fingerprints from previous runs, etc (this is advance, only use if needed)\n===================\n"
    for INSTANCE in "${INSTANCES[@]}"
    do
        PARTS=(${INSTANCE//${DELIM}/ })
        echo "ssh-keygen -f \"${HOME}/.ssh/known_hosts\" -R \"${PARTS[0]}\"  &&  ssh-keygen -f \"${HOME}/.ssh/known_hosts\" -R \"${PARTS[1]}\""
    done

    echo -e "\n"
    echo "IPs in /etc/hosts file format"
    echo "================================"
    display_ip_host_format ${INSTANCES}
    echo ""
}

###
###  Creates 1..n GCE instances for Ansible inventory
###  Ensures SSH key copy for passwordless SSH access
function create_gce_vms() {
    i=${CLUSTER_START_INDEX}
    end=$(($1 + CLUSTER_START_INDEX))
    cluster_id=2

    # TODO: Due to quota in regions, spread out over n-cluster regions

    while [[ $i -lt ${end} ]]; do

        VM_EXISTS="$( gcloud compute instances list --filter="name=${GCE_NAME_PREFIX}${i}" --format="value(name)" 2>/dev/null )"
        if [ -z "${VM_EXISTS}" ]; then
            echo "Creating cnuc-${i}..."
            RAND_SUFFIX=$(echo $RANDOM | md5sum | head -c 5; echo;)
            # TODO: Add Franchise labels to the cluster when ready
            # Output command being run
            set -x
            gcloud compute instances create "${GCE_NAME_PREFIX}${i}" \
                --image-family=${MACHINE_OS_FAMILY} \
                --image-project=${MACHINE_OS_PROJECT} \
                --enable-nested-virtualization \
                --zone="${ZONE}" \
                --boot-disk-size "${DISK_SIZE}" \
                --boot-disk-type pd-ssd \
                --create-disk=mode=rw,size="${SECOND_DISK_SIZE},type=projects/${PROJECT_ID}/zones/${ZONE}/diskTypes/pd-ssd,name=disk-${i}-${RAND_SUFFIX},device-name=cnuc-disk-${i}-${RAND_SUFFIX}" \
                --can-ip-forward \
                --network "${NETWORK}" \
                --labels="type=abm,category=edge-server,vxlanid=${VXLAN_ID}" \
                --tags http-server,https-server,edge \
                --min-cpu-platform "${MIN_MACHINE_PLATFORM}" \
                --scopes cloud-platform \
                --metadata "startup-script-url=gs://${BUCKET_NAME}/gce-init.sh,vxlanid=${VXLAN_ID},instance=${i},cluster_id=${cluster_id}" \
                --machine-type ${MACHINE_SIZE} \
                --project ${PROJECT_ID} ${PREEMPTIBLE_OPTION}
            # Disable outputting command being run. Use subshell to not display this command.
            { set +x; } 2>/dev/null

        else
            echo "cnuc-${i} already exists, will skip creating new VM."
        fi

        if [[ $(( i%REQUIRED_CLUSTER_SIZE )) == 0 ]]; then
            VXLAN_ID=$(( VXLAN_ID + 1))
            echo "Next ${REQUIRED_CLUSTER_SIZE} clusters will use VXLAN_ID=${VXLAN_ID}"
            cluster_id=2 # reset
        else
            let cluster_id=cluster_id+1
        fi

        let i=i+1

        echo -e "\n\n"
    done
    echo -e "Done creating GCE Instances"
}

function setup_ssh_firewall() {
    echo "Checking SSH firewall..."
    FIREWALL_EXISTS=$(gcloud compute firewall-rules list --filter="name=default-allow-ssh" --format="value(name)")
    if [ -z "${FIREWALL_EXISTS}" ]; then
        gcloud compute firewall-rules create --network=${NETWORK} default-allow-ssh --allow=tcp:22
    fi

    gcloud compute firewall-rules create allow-rdp \
        --direction=INGRESS \
        --priority=1000 \
        --network=${NETWORK} \
        --allow=tcp:3389 \
        --source-ranges=0.0.0.0/0 \
        --project=${PROJECT_ID}

}
