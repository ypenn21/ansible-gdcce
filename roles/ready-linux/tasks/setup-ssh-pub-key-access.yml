##################
###### Passwordless SSH (el-gato) to all other peers
##################

### Add pub-key to facts by name (el-gato's public key for the abm-key)
- name: Get Public Key
  shell: "cat {{ ssh_user_home }}/{{ ssh_key_name }}.pub"
  register: abm_key_pub_value
  tags:
  - abm-authorized-keys
  - abm-ssh

- name: Add ABM Pub Key to dictionary
  set_fact:
    keys: "{{ keys | default({}) | combine( { cluster_name: abm_key_pub_value.stdout } ) }}"
    cacheable: true
  tags:
  - abm-authorized-keys
  - abm-ssh

- name: Create localhost temporary file
  become: no
  run_once: true # run-once becasue it is local-action
  local_action:
    module: ansible.builtin.tempfile
    state: file
    suffix: temp
    path: "${HOME}"
  register: tempfile_1
  tags:
  - abm-ssh
  - abm-authorized-keys
  - create-local-temp

- name: Create authorized_keys into temp file with Public keys
  become: no
  local_action:
    module: lineinfile
    line: "{{ item.value }}"
    dest: "{{ tempfile_1.path }}"
    create: true
  loop:
    - "{{ lookup('dict', keys) }}"
  tags:
  - abm-ssh
  - abm-authorized-keys

### Loop pub-key facts and add all of them to {{ ssh_user_home }}/authorized_keys
- name: Copy authorized_keys to remote
  ansible.builtin.copy:
    src: "{{ tempfile_1.path }}"
    dest: "{{ ssh_user_home }}/authorized_keys"
    mode: '0600'
    owner: "{{ abm_install_user }}"
    group: "{{ abm_install_user }}"
  tags:
  - abm-ssh
  - abm-authorized-keys

- name: Remove the temp file after copying
  local_action:
    module: ansible.builtin.file
    path: "{{ tempfile_1.path }}"
    state: absent
  when: tempfile_1.path is defined
  tags:
  - abm-ssh
  - abm-authorized-keys
  - delete-local-temp

##################
######
##################

### Setup keyless ssh across cluster
- name: Setup keyless SSH from primary to all others in group
  shell: |
    ssh-keyscan -v {{ machine }} >> {{ ssh_user_home }}/known_hosts
  register: keyscan_out
  until: "keyscan_out is not failed"
  retries: 10
  delay: 5
  loop: "{{ peer_node_ips }}"
  loop_control:
    loop_var: machine
  when:
  - (primary_cluster_machine is defined)
  - (primary_cluster_machine == true)
  - (node_ip != machine)
  tags:
  - abm-ssh
  - debug-ssh
  - abm-authorized-keys

### Test by ssh 10.200.0.0/24 (Peer Nodes with node-to-node user)
- name: verify SSH access to other machines
  command:
    cmd: ssh {{abm_install_user}}@{{ machine }} -i {{ ssh_user_home }}/{{ ssh_key_name }} -o 'BatchMode=yes' -o 'ConnectionAttempts=1' -o 'ConnectTimeout=5' -o StrictHostKeyChecking=no true
  loop: "{{ peer_node_ips }}"
  loop_control:
    loop_var: machine
  when:
    - (primary_cluster_machine is defined)
    - (primary_cluster_machine == true)
    - (node_ip != machine)
    - (is_cloud_resource is defined)
    - (is_cloud_resource == True)
  tags:
  - abm-ssh
  - debug-ssh
  - verify-ssh
